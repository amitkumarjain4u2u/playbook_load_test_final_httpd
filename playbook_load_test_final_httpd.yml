---
- hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
    aws_access_key: ""
    aws_secret_key: ""
    application: httpd
    machine_counts: 3
    region: us-west-1
    keypair_name: ec2_key_pair
    cal: "ami-00fc224d9834053d6"
    ore: "ami-087c2c50437d0b80d"
    mum: "ami-0a74bfeb190bd404f"
    verg: "ami-0c322300a1dd5dc79"
    ec2_key_directory_ansible: "/home/ansible/pdauto/"
    keyowner: ansible
  tasks:
    - name: Get my current IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: my_ip

    - debug:
        var: my_ip
    - pip: 
        name: boto
    - pip: 
        name: boto3 
    - name: Create simple security group
      ec2_group:
        name: webservers
        description: A security group for my current IP
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
      register: webserversgroup
    - debug:
        var:  webserversgroup
    - name: Create simple security group
      ec2_group:
        name: webservers1
        description: A security group for my current IP
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
        rules_egress:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: webserversgroup1
    - debug:
        var: webserversgroup1
    - name: Create the ELB only listening over port 80
      ec2_elb_lb:
        name: "{{ application }}-load-balancer"
        region: "{{ region }}"
        state: present
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        zones:
          - "{{ region }}a"
          - "{{ region }}b"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: elb

    - name: create a new ec2 key pair, returns generated private key
      ec2_key:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ keypair_name }}"
        region: "{{ region }}"
      register: keypair
      tags:
        - ec2_key

    - debug:
        var: keypair
      tags:
        - ec2_key


    - name: Copy EC2 Key Pair private key locally
      copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory_ansible }}ec2_key_pair.ppk owner="{{ keyowner }}" group="{{ keyowner }}" mode=0400
      when: keypair.changed == true
      tags:
        - ec2_key


    - name: Copy EC2 Key Pair private key locally
      copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory_ansible }}ec2_key_pair.pem owner="{{ keyowner }}" group="{{ keyowner }}" mode=0400
      when: keypair.changed == true
      tags:
        - ec2_key
    
    - name: Copy EC2 Key Pair private key locally
      copy: content="{{ keypair.key.private_key }}" dest="{{ ec2_key_directory_ansible }}ec2_key_pair.ppk" owner="{{ keyowner }}" group="{{ keyowner }}" mode=0400
      when: keypair.changed == true
      tags:
        - ec2_key


    - name: Copy EC2 Key Pair private key locally
      copy: content="{{ keypair.key.private_key }}" dest="{{ ec2_key_directory_ansible }}ec2_key_pair.pem" owner="{{ keyowner }}" group="{{ keyowner }}" mode=0400
      when: keypair.changed == true
      tags:
        - ec2_key



    - name: Create EC2 instances
      ec2:
        key_name: "{{ keypair_name }}"
        image: "{{ cal }}"
        wait: yes
        instance_type: t2.micro
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        group_id:
          - "{{ webserversgroup1.group_id }}"
          - "{{ elb.elb.security_group_ids | first }}"
        instance_tags:
          application: "{{ application }}"
        exact_count: "{{ machine_counts }}"
        count_tag:
          application: "{{ application }}"
      register: ec2_instances

    - debug:
        var: ec2_instances

    - name: Store EC2 instance IPs to provision against
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_instance_ips
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Wait for servers to come online
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 360
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Add EC2 instances as known hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ ec2_instances.tagged_instances }}"


- hosts: ec2_instance_ips
  remote_user: ec2-user
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: false
  vars:
    passwd: ansible
    usr: ansible
  tasks:
    - user:
       name: "{{ usr }}"
       state: present
       groups: wheel
       password: "{{ passwd | password_hash('sha512') }}"
       update_password: on_create

    - copy:
        content: "{{ usr }} ALL=(ALL)  NOPASSWD: ALL"
        dest: "/etc/sudoers.d/{{ usr }}"

    - openssh_keypair:
        path: /home/ansible/.ssh/id_rsa
      delegate_to: localhost
      run_once: true

    - authorized_key:
        user: "{{ usr }}"
        state: present
        key: "{{ lookup('file', '/home/ansible/.ssh/id_rsa.pub') }}"

    - copy:
        src: /home/ansible/.ssh/id_rsa
        dest: "/home/{{ usr }}/.ssh/id_rsa"
        owner: "{{ usr }}"
        group: "{{ usr }}"
        mode: 0600
    - name: installing vim on managed nodes
      yum:
        name: vim
        state: latest
    - name: starting sshd services
      service:
        name: sshd
        state: restarted
        enabled: yes
    - name: Enabling password autentication yes for ssh
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication '
        line: PasswordAuthentication yes
    - name: starting sshd services
      service:
        name: sshd
        state: restarted
        enabled: yes
    - name: installing python
      yum:
        name: python2
        state: latest
    - name: installing python
      yum:
        name: python3
        state: latest
    - name: Check for Python
      raw: test -e /usr/bin/python
      changed_when: false
      failed_when: false
      register: check_python
    - debug:
        var: check_python
    - name: Check for Python2
      raw: test -e /usr/bin/python2
      changed_when: false
      failed_when: false
      register: check_python2
    - debug:
        var: check_python2

    - name: Check for Python3
      raw: test -e /usr/bin/python3
      changed_when: false
      failed_when: false
      register: check_python3
    - debug:
        var: check_python3
    - ping:


- hosts: ec2_instance_ips
  remote_user: ec2-user
  become: yes
  become_method: sudo
  become_user: root
  tasks:
    - name: Install httpd
      yum:
        name: httpd
        state: latest
    - name: Restart httpd
      service:
        name: httpd
        state: started
        enabled: yes
    - name: Create default index page
      copy:
        dest: /var/www/html/index.html
        content: "Hi ec2-user from {{ ansible_hostname }}"
    - name: Restart httpd
      service:
        name: httpd
        state: restarted
        enabled: yes



- hosts: localhost
  vars:
    aws_access_key: "AKIAY6NCWZ33UIMZDI6G"
    aws_secret_key: "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"
    application: httpd
    machine_counts: 3
    region: us-west-1
  tasks:
     - pip:
         name: boto
     - pip: 
         name: boto3
     - name: Add each EC2 instance to the ELB
       ec2_elb:
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          state: present
          ec2_elbs: "{{ application }}-load-balancer"
          region: "{{ item.region }}"
          instance_id: "{{ item.id }}"
       with_items: "{{ ec2_instances.tagged_instances }}"
